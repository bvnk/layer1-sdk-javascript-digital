/**
 * Digital Asset
 * Layer1 API making management of crypto assets simple and easy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateStakingTransactionRequest model module.
 * @module com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/CreateStakingTransactionRequest
 * @version 1.0.0
 */
class CreateStakingTransactionRequest {
    /**
     * Constructs a new <code>CreateStakingTransactionRequest</code>.
     * @alias module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/CreateStakingTransactionRequest
     */
    constructor() { 
        
        CreateStakingTransactionRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateStakingTransactionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/CreateStakingTransactionRequest} obj Optional instance to populate.
     * @return {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/CreateStakingTransactionRequest} The populated <code>CreateStakingTransactionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateStakingTransactionRequest();

            if (data.hasOwnProperty('assetPoolId')) {
                obj['assetPoolId'] = ApiClient.convertToType(data['assetPoolId'], 'String');
            }
            if (data.hasOwnProperty('asset')) {
                obj['asset'] = ApiClient.convertToType(data['asset'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], Object);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateStakingTransactionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateStakingTransactionRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['assetPoolId'] && !(typeof data['assetPoolId'] === 'string' || data['assetPoolId'] instanceof String)) {
            throw new Error("Expected the field `assetPoolId` to be a primitive type in the JSON string but got " + data['assetPoolId']);
        }
        // ensure the json data is a string
        if (data['asset'] && !(typeof data['asset'] === 'string' || data['asset'] instanceof String)) {
            throw new Error("Expected the field `asset` to be a primitive type in the JSON string but got " + data['asset']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }

        return true;
    }


}



/**
 * asset pool id
 * @member {String} assetPoolId
 */
CreateStakingTransactionRequest.prototype['assetPoolId'] = undefined;

/**
 * currency
 * @member {String} asset
 */
CreateStakingTransactionRequest.prototype['asset'] = undefined;

/**
 * crypto network
 * @member {String} network
 */
CreateStakingTransactionRequest.prototype['network'] = undefined;

/**
 * @member {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/CreateStakingTransactionRequest.TypeEnum} type
 */
CreateStakingTransactionRequest.prototype['type'] = undefined;

/**
 * custom identifier supplied for transaction that is used to link transaction to specific customer or use case
 * @member {String} reference
 */
CreateStakingTransactionRequest.prototype['reference'] = undefined;

/**
 * blockchain address
 * @member {String} address
 */
CreateStakingTransactionRequest.prototype['address'] = undefined;

/**
 * @member {Object} amount
 */
CreateStakingTransactionRequest.prototype['amount'] = undefined;

/**
 * @member {Object.<String, String>} metadata
 */
CreateStakingTransactionRequest.prototype['metadata'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CreateStakingTransactionRequest['TypeEnum'] = {

    /**
     * value: "STAKE"
     * @const
     */
    "STAKE": "STAKE",

    /**
     * value: "UNSTAKE"
     * @const
     */
    "UNSTAKE": "UNSTAKE",

    /**
     * value: "RELEASE"
     * @const
     */
    "RELEASE": "RELEASE",

    /**
     * value: "unknown_default_open_api"
     * @const
     */
    "unknown_default_open_api": "unknown_default_open_api"
};



export default CreateStakingTransactionRequest;

