/**
 * Digital Asset
 * Layer1 API making management of crypto assets simple and easy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Asset model module.
 * @module com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/Asset
 * @version 1.0.0
 */
class Asset {
    /**
     * Constructs a new <code>Asset</code>.
     * @alias module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/Asset
     */
    constructor() { 
        
        Asset.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Asset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/Asset} obj Optional instance to populate.
     * @return {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/Asset} The populated <code>Asset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Asset();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('decimalPrecision')) {
                obj['decimalPrecision'] = ApiClient.convertToType(data['decimalPrecision'], 'Number');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Asset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Asset</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }

        return true;
    }


}



/**
 * currency code
 * @member {String} code
 */
Asset.prototype['code'] = undefined;

/**
 * currency decimal precision
 * @member {Number} decimalPrecision
 */
Asset.prototype['decimalPrecision'] = undefined;

/**
 * transaction model supported by the asset
 * @member {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/Asset.ModelEnum} model
 */
Asset.prototype['model'] = undefined;





/**
 * Allowed values for the <code>model</code> property.
 * @enum {String}
 * @readonly
 */
Asset['ModelEnum'] = {

    /**
     * value: "UTXO"
     * @const
     */
    "UTXO": "UTXO",

    /**
     * value: "ACCOUNT"
     * @const
     */
    "ACCOUNT": "ACCOUNT",

    /**
     * value: "CONTRACT"
     * @const
     */
    "CONTRACT": "CONTRACT",

    /**
     * value: "unknown_default_open_api"
     * @const
     */
    "unknown_default_open_api": "unknown_default_open_api"
};



export default Asset;

