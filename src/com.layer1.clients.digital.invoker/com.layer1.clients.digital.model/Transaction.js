/**
 * Digital Asset
 * Layer1 API making management of crypto assets simple and easy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import NetworkDetail from './NetworkDetail';
import Participant from './Participant';
import TransactionMetadata from './TransactionMetadata';

/**
 * The Transaction model module.
 * @module com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/Transaction
 * @version 1.0.0
 */
class Transaction {
    /**
     * Constructs a new <code>Transaction</code>.
     * @alias module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/Transaction
     */
    constructor() { 
        
        Transaction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/Transaction} obj Optional instance to populate.
     * @return {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/Transaction} The populated <code>Transaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transaction();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = Address.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], [Participant]);
            }
            if (data.hasOwnProperty('destinations')) {
                obj['destinations'] = ApiClient.convertToType(data['destinations'], [Participant]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('asset')) {
                obj['asset'] = ApiClient.convertToType(data['asset'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], Object);
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'String');
            }
            if (data.hasOwnProperty('networkDetail')) {
                obj['networkDetail'] = NetworkDetail.constructFromObject(data['networkDetail']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = TransactionMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transaction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          Address.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        if (data['sources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sources'])) {
                throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
            }
            // validate the optional field `sources` (array)
            for (const item of data['sources']) {
                Participant.validateJSON(item);
            };
        }
        if (data['destinations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['destinations'])) {
                throw new Error("Expected the field `destinations` to be an array in the JSON data but got " + data['destinations']);
            }
            // validate the optional field `destinations` (array)
            for (const item of data['destinations']) {
                Participant.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['asset'] && !(typeof data['asset'] === 'string' || data['asset'] instanceof String)) {
            throw new Error("Expected the field `asset` to be a primitive type in the JSON string but got " + data['asset']);
        }
        // ensure the json data is a string
        if (data['hash'] && !(typeof data['hash'] === 'string' || data['hash'] instanceof String)) {
            throw new Error("Expected the field `hash` to be a primitive type in the JSON string but got " + data['hash']);
        }
        // validate the optional field `networkDetail`
        if (data['networkDetail']) { // data not null
          NetworkDetail.validateJSON(data['networkDetail']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          TransactionMetadata.validateJSON(data['metadata']);
        }

        return true;
    }


}



/**
 * transaction id
 * @member {String} id
 */
Transaction.prototype['id'] = undefined;

/**
 * address involved in the transaction
 * @member {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/Address} address
 */
Transaction.prototype['address'] = undefined;

/**
 * custom identifier supplied for transaction that is used to link transaction to specific customer or use case
 * @member {String} reference
 */
Transaction.prototype['reference'] = undefined;

/**
 * transaction status
 * @member {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/Transaction.StatusEnum} status
 */
Transaction.prototype['status'] = undefined;

/**
 * list of addresses and amounts that fund the transaction
 * @member {Array.<module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/Participant>} sources
 */
Transaction.prototype['sources'] = undefined;

/**
 * list of recipient addresses and amounts that benefit from the transaction
 * @member {Array.<module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/Participant>} destinations
 */
Transaction.prototype['destinations'] = undefined;

/**
 * transaction type
 * @member {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/Transaction.TypeEnum} type
 */
Transaction.prototype['type'] = undefined;

/**
 * currency
 * @member {String} asset
 */
Transaction.prototype['asset'] = undefined;

/**
 * @member {Object} amount
 */
Transaction.prototype['amount'] = undefined;

/**
 * blockchain transaction hash
 * @member {String} hash
 */
Transaction.prototype['hash'] = undefined;

/**
 * network details of the transaction
 * @member {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/NetworkDetail} networkDetail
 */
Transaction.prototype['networkDetail'] = undefined;

/**
 * metadata about the transaction
 * @member {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/TransactionMetadata} metadata
 */
Transaction.prototype['metadata'] = undefined;

/**
 * timestamp when transaction was created
 * @member {Date} createdAt
 */
Transaction.prototype['createdAt'] = undefined;

/**
 * timestamp when transaction was updated
 * @member {Date} updatedAt
 */
Transaction.prototype['updatedAt'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Transaction['StatusEnum'] = {

    /**
     * value: "BLOCKED"
     * @const
     */
    "BLOCKED": "BLOCKED",

    /**
     * value: "CONFIRMED"
     * @const
     */
    "CONFIRMED": "CONFIRMED",

    /**
     * value: "CREATED"
     * @const
     */
    "CREATED": "CREATED",

    /**
     * value: "DETECTED"
     * @const
     */
    "DETECTED": "DETECTED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "FUNDS_RESERVED"
     * @const
     */
    "FUNDS_RESERVED": "FUNDS_RESERVED",

    /**
     * value: "HELD"
     * @const
     */
    "HELD": "HELD",

    /**
     * value: "REJECTED"
     * @const
     */
    "REJECTED": "REJECTED",

    /**
     * value: "SCREENING_PASSED"
     * @const
     */
    "SCREENING_PASSED": "SCREENING_PASSED",

    /**
     * value: "SCREENING_REQUESTED"
     * @const
     */
    "SCREENING_REQUESTED": "SCREENING_REQUESTED",

    /**
     * value: "SIGNED"
     * @const
     */
    "SIGNED": "SIGNED",

    /**
     * value: "SUCCESS"
     * @const
     */
    "SUCCESS": "SUCCESS",

    /**
     * value: "UNCONFIRMED"
     * @const
     */
    "UNCONFIRMED": "UNCONFIRMED",

    /**
     * value: "REPLACED"
     * @const
     */
    "REPLACED": "REPLACED",

    /**
     * value: "unknown_default_open_api"
     * @const
     */
    "unknown_default_open_api": "unknown_default_open_api"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Transaction['TypeEnum'] = {

    /**
     * value: "DEPOSIT"
     * @const
     */
    "DEPOSIT": "DEPOSIT",

    /**
     * value: "WITHDRAWAL"
     * @const
     */
    "WITHDRAWAL": "WITHDRAWAL",

    /**
     * value: "CONSOLIDATION"
     * @const
     */
    "CONSOLIDATION": "CONSOLIDATION",

    /**
     * value: "RETURN"
     * @const
     */
    "RETURN": "RETURN",

    /**
     * value: "STAKE"
     * @const
     */
    "STAKE": "STAKE",

    /**
     * value: "UNSTAKE"
     * @const
     */
    "UNSTAKE": "UNSTAKE",

    /**
     * value: "DELEGATE"
     * @const
     */
    "DELEGATE": "DELEGATE",

    /**
     * value: "UNDELEGATE"
     * @const
     */
    "UNDELEGATE": "UNDELEGATE",

    /**
     * value: "RELEASE"
     * @const
     */
    "RELEASE": "RELEASE",

    /**
     * value: "unknown_default_open_api"
     * @const
     */
    "unknown_default_open_api": "unknown_default_open_api"
};



export default Transaction;

