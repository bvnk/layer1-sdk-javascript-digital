/**
 * Digital Asset
 * Layer1 API making management of crypto assets simple and easy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Participant from './Participant';
import ScreeningMetadata from './ScreeningMetadata';
import TransactionMetadata from './TransactionMetadata';

/**
 * The ScreeningView model module.
 * @module com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/ScreeningView
 * @version 1.0.0
 */
class ScreeningView {
    /**
     * Constructs a new <code>ScreeningView</code>.
     * @alias module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/ScreeningView
     */
    constructor() { 
        
        ScreeningView.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScreeningView</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/ScreeningView} obj Optional instance to populate.
     * @return {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/ScreeningView} The populated <code>ScreeningView</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScreeningView();

            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
            }
            if (data.hasOwnProperty('transactionHash')) {
                obj['transactionHash'] = ApiClient.convertToType(data['transactionHash'], 'String');
            }
            if (data.hasOwnProperty('transactionStatus')) {
                obj['transactionStatus'] = ApiClient.convertToType(data['transactionStatus'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('transactionMetadata')) {
                obj['transactionMetadata'] = TransactionMetadata.constructFromObject(data['transactionMetadata']);
            }
            if (data.hasOwnProperty('transactionCreatedAt')) {
                obj['transactionCreatedAt'] = ApiClient.convertToType(data['transactionCreatedAt'], 'Date');
            }
            if (data.hasOwnProperty('transactionUpdatedAt')) {
                obj['transactionUpdatedAt'] = ApiClient.convertToType(data['transactionUpdatedAt'], 'Date');
            }
            if (data.hasOwnProperty('screeningState')) {
                obj['screeningState'] = ApiClient.convertToType(data['screeningState'], 'String');
            }
            if (data.hasOwnProperty('screeningReason')) {
                obj['screeningReason'] = ApiClient.convertToType(data['screeningReason'], 'String');
            }
            if (data.hasOwnProperty('screeningReasonCode')) {
                obj['screeningReasonCode'] = ApiClient.convertToType(data['screeningReasonCode'], 'String');
            }
            if (data.hasOwnProperty('screeningCreatedAt')) {
                obj['screeningCreatedAt'] = ApiClient.convertToType(data['screeningCreatedAt'], 'Date');
            }
            if (data.hasOwnProperty('screeningUpdatedAt')) {
                obj['screeningUpdatedAt'] = ApiClient.convertToType(data['screeningUpdatedAt'], 'Date');
            }
            if (data.hasOwnProperty('screeningMetadata')) {
                obj['screeningMetadata'] = ScreeningMetadata.constructFromObject(data['screeningMetadata']);
            }
            if (data.hasOwnProperty('participants')) {
                obj['participants'] = ApiClient.convertToType(data['participants'], [Participant]);
            }
            if (data.hasOwnProperty('operation')) {
                obj['operation'] = ApiClient.convertToType(data['operation'], 'String');
            }
            if (data.hasOwnProperty('addressId')) {
                obj['addressId'] = ApiClient.convertToType(data['addressId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScreeningView</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScreeningView</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['transactionId'] && !(typeof data['transactionId'] === 'string' || data['transactionId'] instanceof String)) {
            throw new Error("Expected the field `transactionId` to be a primitive type in the JSON string but got " + data['transactionId']);
        }
        // ensure the json data is a string
        if (data['transactionHash'] && !(typeof data['transactionHash'] === 'string' || data['transactionHash'] instanceof String)) {
            throw new Error("Expected the field `transactionHash` to be a primitive type in the JSON string but got " + data['transactionHash']);
        }
        // ensure the json data is a string
        if (data['transactionStatus'] && !(typeof data['transactionStatus'] === 'string' || data['transactionStatus'] instanceof String)) {
            throw new Error("Expected the field `transactionStatus` to be a primitive type in the JSON string but got " + data['transactionStatus']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // validate the optional field `transactionMetadata`
        if (data['transactionMetadata']) { // data not null
          TransactionMetadata.validateJSON(data['transactionMetadata']);
        }
        // ensure the json data is a string
        if (data['screeningState'] && !(typeof data['screeningState'] === 'string' || data['screeningState'] instanceof String)) {
            throw new Error("Expected the field `screeningState` to be a primitive type in the JSON string but got " + data['screeningState']);
        }
        // ensure the json data is a string
        if (data['screeningReason'] && !(typeof data['screeningReason'] === 'string' || data['screeningReason'] instanceof String)) {
            throw new Error("Expected the field `screeningReason` to be a primitive type in the JSON string but got " + data['screeningReason']);
        }
        // ensure the json data is a string
        if (data['screeningReasonCode'] && !(typeof data['screeningReasonCode'] === 'string' || data['screeningReasonCode'] instanceof String)) {
            throw new Error("Expected the field `screeningReasonCode` to be a primitive type in the JSON string but got " + data['screeningReasonCode']);
        }
        // validate the optional field `screeningMetadata`
        if (data['screeningMetadata']) { // data not null
          ScreeningMetadata.validateJSON(data['screeningMetadata']);
        }
        if (data['participants']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['participants'])) {
                throw new Error("Expected the field `participants` to be an array in the JSON data but got " + data['participants']);
            }
            // validate the optional field `participants` (array)
            for (const item of data['participants']) {
                Participant.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['operation'] && !(typeof data['operation'] === 'string' || data['operation'] instanceof String)) {
            throw new Error("Expected the field `operation` to be a primitive type in the JSON string but got " + data['operation']);
        }
        // ensure the json data is a string
        if (data['addressId'] && !(typeof data['addressId'] === 'string' || data['addressId'] instanceof String)) {
            throw new Error("Expected the field `addressId` to be a primitive type in the JSON string but got " + data['addressId']);
        }

        return true;
    }


}



/**
 * Unique identifier of the transaction
 * @member {String} transactionId
 */
ScreeningView.prototype['transactionId'] = undefined;

/**
 * Blockchain transaction hash
 * @member {String} transactionHash
 */
ScreeningView.prototype['transactionHash'] = undefined;

/**
 * Current status of the transaction
 * @member {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/ScreeningView.TransactionStatusEnum} transactionStatus
 */
ScreeningView.prototype['transactionStatus'] = undefined;

/**
 * Network code used for the transaction
 * @member {String} network
 */
ScreeningView.prototype['network'] = undefined;

/**
 * Transaction metadata in JSON format
 * @member {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/TransactionMetadata} transactionMetadata
 */
ScreeningView.prototype['transactionMetadata'] = undefined;

/**
 * Timestamp when the transaction was created
 * @member {Date} transactionCreatedAt
 */
ScreeningView.prototype['transactionCreatedAt'] = undefined;

/**
 * Timestamp when the transaction was last updated
 * @member {Date} transactionUpdatedAt
 */
ScreeningView.prototype['transactionUpdatedAt'] = undefined;

/**
 * Screening state of the transaction
 * @member {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/ScreeningView.ScreeningStateEnum} screeningState
 */
ScreeningView.prototype['screeningState'] = undefined;

/**
 * Reason for the screening result
 * @member {String} screeningReason
 */
ScreeningView.prototype['screeningReason'] = undefined;

/**
 * Reason code for the screening result
 * @member {String} screeningReasonCode
 */
ScreeningView.prototype['screeningReasonCode'] = undefined;

/**
 * Timestamp when the screening was created
 * @member {Date} screeningCreatedAt
 */
ScreeningView.prototype['screeningCreatedAt'] = undefined;

/**
 * Timestamp when the screening was last updated
 * @member {Date} screeningUpdatedAt
 */
ScreeningView.prototype['screeningUpdatedAt'] = undefined;

/**
 * Screening metadata in JSON format
 * @member {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/ScreeningMetadata} screeningMetadata
 */
ScreeningView.prototype['screeningMetadata'] = undefined;

/**
 * List of participants involved in the transaction
 * @member {Array.<module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/Participant>} participants
 */
ScreeningView.prototype['participants'] = undefined;

/**
 * Operation type for the screening
 * @member {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/ScreeningView.OperationEnum} operation
 */
ScreeningView.prototype['operation'] = undefined;

/**
 * Unique identifier of the address involved in the screening
 * @member {String} addressId
 */
ScreeningView.prototype['addressId'] = undefined;





/**
 * Allowed values for the <code>transactionStatus</code> property.
 * @enum {String}
 * @readonly
 */
ScreeningView['TransactionStatusEnum'] = {

    /**
     * value: "BLOCKED"
     * @const
     */
    "BLOCKED": "BLOCKED",

    /**
     * value: "CONFIRMED"
     * @const
     */
    "CONFIRMED": "CONFIRMED",

    /**
     * value: "CREATED"
     * @const
     */
    "CREATED": "CREATED",

    /**
     * value: "DETECTED"
     * @const
     */
    "DETECTED": "DETECTED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "FUNDS_RESERVED"
     * @const
     */
    "FUNDS_RESERVED": "FUNDS_RESERVED",

    /**
     * value: "HELD"
     * @const
     */
    "HELD": "HELD",

    /**
     * value: "REJECTED"
     * @const
     */
    "REJECTED": "REJECTED",

    /**
     * value: "SCREENING_PASSED"
     * @const
     */
    "SCREENING_PASSED": "SCREENING_PASSED",

    /**
     * value: "SCREENING_REQUESTED"
     * @const
     */
    "SCREENING_REQUESTED": "SCREENING_REQUESTED",

    /**
     * value: "SIGNED"
     * @const
     */
    "SIGNED": "SIGNED",

    /**
     * value: "SUCCESS"
     * @const
     */
    "SUCCESS": "SUCCESS",

    /**
     * value: "UNCONFIRMED"
     * @const
     */
    "UNCONFIRMED": "UNCONFIRMED",

    /**
     * value: "REPLACED"
     * @const
     */
    "REPLACED": "REPLACED",

    /**
     * value: "unknown_default_open_api"
     * @const
     */
    "unknown_default_open_api": "unknown_default_open_api"
};


/**
 * Allowed values for the <code>screeningState</code> property.
 * @enum {String}
 * @readonly
 */
ScreeningView['ScreeningStateEnum'] = {

    /**
     * value: "APPROVED"
     * @const
     */
    "APPROVED": "APPROVED",

    /**
     * value: "REJECTED"
     * @const
     */
    "REJECTED": "REJECTED",

    /**
     * value: "PENDING_SCREENING"
     * @const
     */
    "PENDING_SCREENING": "PENDING_SCREENING",

    /**
     * value: "unknown_default_open_api"
     * @const
     */
    "unknown_default_open_api": "unknown_default_open_api"
};


/**
 * Allowed values for the <code>operation</code> property.
 * @enum {String}
 * @readonly
 */
ScreeningView['OperationEnum'] = {

    /**
     * value: "DEPOSIT"
     * @const
     */
    "DEPOSIT": "DEPOSIT",

    /**
     * value: "WITHDRAWAL"
     * @const
     */
    "WITHDRAWAL": "WITHDRAWAL",

    /**
     * value: "CONSOLIDATION"
     * @const
     */
    "CONSOLIDATION": "CONSOLIDATION",

    /**
     * value: "RETURN"
     * @const
     */
    "RETURN": "RETURN",

    /**
     * value: "STAKE"
     * @const
     */
    "STAKE": "STAKE",

    /**
     * value: "UNSTAKE"
     * @const
     */
    "UNSTAKE": "UNSTAKE",

    /**
     * value: "DELEGATE"
     * @const
     */
    "DELEGATE": "DELEGATE",

    /**
     * value: "UNDELEGATE"
     * @const
     */
    "UNDELEGATE": "UNDELEGATE",

    /**
     * value: "RELEASE"
     * @const
     */
    "RELEASE": "RELEASE",

    /**
     * value: "unknown_default_open_api"
     * @const
     */
    "unknown_default_open_api": "unknown_default_open_api"
};



export default ScreeningView;

