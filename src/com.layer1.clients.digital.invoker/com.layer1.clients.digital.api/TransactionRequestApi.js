/**
 * Digital Asset
 * Layer1 API making management of crypto assets simple and easy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../com.layer1.clients.digital.model/ApiError';
import CreateStakingTransactionRequest from '../com.layer1.clients.digital.model/CreateStakingTransactionRequest';
import CreateTransactionRequest from '../com.layer1.clients.digital.model/CreateTransactionRequest';
import PaginatedResultTransactionRequest from '../com.layer1.clients.digital.model/PaginatedResultTransactionRequest';
import TransactionRequest from '../com.layer1.clients.digital.model/TransactionRequest';

/**
* TransactionRequest service.
* @module com.layer1.clients.digital.invoker/com.layer1.clients.digital.api/TransactionRequestApi
* @version 1.0.0
*/
export default class TransactionRequestApi {

    /**
    * Constructs a new TransactionRequestApi. 
    * @alias module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.api/TransactionRequestApi
    * @class
    * @param {module:com.layer1.clients.digital.invoker/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:com.layer1.clients.digital.invoker/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createStakingTransaction operation.
     * @callback module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.api/TransactionRequestApi~createStakingTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/TransactionRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create staking transaction request
     * Create a new blockchain staking transaction
     * @param {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/CreateStakingTransactionRequest} createStakingTransactionRequest 
     * @param {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.api/TransactionRequestApi~createStakingTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/TransactionRequest}
     */
    createStakingTransaction(createStakingTransactionRequest, callback) {
      let postBody = createStakingTransactionRequest;
      // verify the required parameter 'createStakingTransactionRequest' is set
      if (createStakingTransactionRequest === undefined || createStakingTransactionRequest === null) {
        throw new Error("Missing the required parameter 'createStakingTransactionRequest' when calling createStakingTransaction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpSignature', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionRequest;
      return this.apiClient.callApi(
        '/digital/v1/staking-requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTransaction operation.
     * @callback module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.api/TransactionRequestApi~createTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/TransactionRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create transaction request
     * Create a new blockchain transaction
     * @param {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/CreateTransactionRequest} createTransactionRequest 
     * @param {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.api/TransactionRequestApi~createTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/TransactionRequest}
     */
    createTransaction(createTransactionRequest, callback) {
      let postBody = createTransactionRequest;
      // verify the required parameter 'createTransactionRequest' is set
      if (createTransactionRequest === undefined || createTransactionRequest === null) {
        throw new Error("Missing the required parameter 'createTransactionRequest' when calling createTransaction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpSignature', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionRequest;
      return this.apiClient.callApi(
        '/digital/v1/transaction-requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionRequestById operation.
     * @callback module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.api/TransactionRequestApi~getTransactionRequestByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/TransactionRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get transaction request
     * Get transaction request by id
     * @param {String} requestId 
     * @param {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.api/TransactionRequestApi~getTransactionRequestByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/TransactionRequest}
     */
    getTransactionRequestById(requestId, callback) {
      let postBody = null;
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling getTransactionRequestById");
      }

      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpSignature', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionRequest;
      return this.apiClient.callApi(
        '/digital/v1/transaction-requests/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTransactionRequests operation.
     * @callback module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.api/TransactionRequestApi~listTransactionRequestsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/PaginatedResultTransactionRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List transaction requests
     * Retrieve paginated list of transaction requests
     * @param {String} assetPoolId asset pool id
     * @param {Number} pageNumber current page number
     * @param {Number} pageSize number of items in a page
     * @param {Object} opts Optional parameters
     * @param {String} [q] Query in lucene like format, e.g. reference:REF-12a1. Supported properties: reference, type
     * @param {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.api/TransactionRequestApi~listTransactionRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/PaginatedResultTransactionRequest}
     */
    listTransactionRequests(assetPoolId, pageNumber, pageSize, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assetPoolId' is set
      if (assetPoolId === undefined || assetPoolId === null) {
        throw new Error("Missing the required parameter 'assetPoolId' when calling listTransactionRequests");
      }
      // verify the required parameter 'pageNumber' is set
      if (pageNumber === undefined || pageNumber === null) {
        throw new Error("Missing the required parameter 'pageNumber' when calling listTransactionRequests");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling listTransactionRequests");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'assetPoolId': assetPoolId,
        'pageNumber': pageNumber,
        'pageSize': pageSize
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpSignature', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedResultTransactionRequest;
      return this.apiClient.callApi(
        '/digital/v1/transaction-requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
