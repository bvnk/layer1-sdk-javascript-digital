/**
 * Digital Asset
 * Layer1 API making management of crypto assets simple and easy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../com.layer1.clients.digital.model/ApiError';
import PaginatedResultTransaction from '../com.layer1.clients.digital.model/PaginatedResultTransaction';
import Transaction from '../com.layer1.clients.digital.model/Transaction';
import TransactionClaimRequest from '../com.layer1.clients.digital.model/TransactionClaimRequest';

/**
* Transaction service.
* @module com.layer1.clients.digital.invoker/com.layer1.clients.digital.api/TransactionApi
* @version 1.0.0
*/
export default class TransactionApi {

    /**
    * Constructs a new TransactionApi. 
    * @alias module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.api/TransactionApi
    * @class
    * @param {module:com.layer1.clients.digital.invoker/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:com.layer1.clients.digital.invoker/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the claimTransaction operation.
     * @callback module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.api/TransactionApi~claimTransactionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Claim blockchain transaction
     * Claim an existing blockchain transaction
     * @param {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/TransactionClaimRequest} transactionClaimRequest 
     * @param {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.api/TransactionApi~claimTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    claimTransaction(transactionClaimRequest, callback) {
      let postBody = transactionClaimRequest;
      // verify the required parameter 'transactionClaimRequest' is set
      if (transactionClaimRequest === undefined || transactionClaimRequest === null) {
        throw new Error("Missing the required parameter 'transactionClaimRequest' when calling claimTransaction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpSignature', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/digital/v1/transaction-claims', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionById operation.
     * @callback module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.api/TransactionApi~getTransactionByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/Transaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get transaction
     * Get transaction by id
     * @param {String} transactionId 
     * @param {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.api/TransactionApi~getTransactionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/Transaction}
     */
    getTransactionById(transactionId, callback) {
      let postBody = null;
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling getTransactionById");
      }

      let pathParams = {
        'transactionId': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpSignature', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Transaction;
      return this.apiClient.callApi(
        '/digital/v1/transactions/{transactionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTransactions operation.
     * @callback module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.api/TransactionApi~listTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/PaginatedResultTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List transactions
     * Retrieve paginated list of transactions
     * @param {String} assetPoolId asset pool id
     * @param {Number} pageNumber current page number
     * @param {Number} pageSize number of items in a page
     * @param {Object} opts Optional parameters
     * @param {String} [q] Query in lucene like format, e.g. hash:0x012a1. Supported properties: hash, reference, customerId, from, to. If time bounds are not provided default are applied
     * @param {module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.api/TransactionApi~listTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.layer1.clients.digital.invoker/com.layer1.clients.digital.model/PaginatedResultTransaction}
     */
    listTransactions(assetPoolId, pageNumber, pageSize, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assetPoolId' is set
      if (assetPoolId === undefined || assetPoolId === null) {
        throw new Error("Missing the required parameter 'assetPoolId' when calling listTransactions");
      }
      // verify the required parameter 'pageNumber' is set
      if (pageNumber === undefined || pageNumber === null) {
        throw new Error("Missing the required parameter 'pageNumber' when calling listTransactions");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling listTransactions");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'assetPoolId': assetPoolId,
        'pageNumber': pageNumber,
        'pageSize': pageSize
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpSignature', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedResultTransaction;
      return this.apiClient.callApi(
        '/digital/v1/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
